# DOCUMENTAZIONE TRACK&GO

## 1. PANORAMICA DEL PROGETTO
Track&Go è una piattaforma web per la gestione delle spedizioni che utilizza:
- Frontend: HTML, CSS, JavaScript puro (vanilla)
- Backend: Python con FastAPI
- Database: SQLite (file trackgo.db)
- Autenticazione: JWT (JSON Web Tokens)

## 2. STRUTTURA DEL PROGETTO
```
PythonProject5/
├── progetto/
│   ├── backend/
│   │   ├── main.py           # File principale FastAPI
│   │   ├── auth.py          # Gestione autenticazione
│   │   ├── database.py      # Configurazione database
│   │   ├── models.py        # Modelli database
│   │   ├── schemas.py       # Schema Pydantic
│   │   └── routes_auth.py   # Route autenticazione
│   │
│   └── frontend/
│       ├── index.html       # Homepage
│       ├── login.html       # Pagina login
│       ├── register.html    # Pagina registrazione
│       ├── dashboard.html   # Dashboard utente
│       ├── css/
│       │   ├── style.css    # Stili principali
│       │   └── theme.css    # Tema e colori
│       └── js/
│           ├── auth.js      # Gestione autenticazione
│           └── main.js      # Script principali
```

## 3. DATABASE
- Tipo: SQLite (file-based, non richiede server separato)
- File: trackgo.db
- Tabelle principali:
  * users: Gestione utenti
  * user_profiles: Profili utenti con dettagli aggiuntivi

Schema del database:
```sql
-- Tabella users
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email VARCHAR UNIQUE,
    hashed_password VARCHAR,
    full_name VARCHAR,
    is_active BOOLEAN DEFAULT TRUE
);

-- Tabella user_profiles
CREATE TABLE user_profiles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    indirizzo VARCHAR,
    citta VARCHAR,
    cap VARCHAR,
    telefono VARCHAR,
    rating_medio FLOAT DEFAULT 0.0,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
```

## 4. AUTENTICAZIONE
- Sistema: JWT (JSON Web Tokens)
- Durata token: 30 minuti
- Hashing password: bcrypt
- Flusso:
  1. Utente inserisce credenziali
  2. Backend verifica e genera token JWT
  3. Frontend salva token in localStorage
  4. Token usato per richieste autenticate

## 5. API ENDPOINTS
```
POST /auth/register
- Registrazione nuovo utente
- Richiede: email, password, full_name, etc.

POST /auth/token
- Login utente
- Richiede: username (email), password
- Restituisce: access_token, token_type, user_id

GET /auth/me
- Informazioni utente corrente
- Richiede: Bearer token
```

## 6. FRONTEND
- Design responsive
- Nessun framework (vanilla JavaScript)
- Gestione stato: localStorage
- Validazione form lato client
- Gestione errori e feedback utente

## 7. SICUREZZA
- Password hashate con bcrypt
- CORS configurato per localhost
- Protezione contro CSRF
- Validazione input lato server
- Sanitizzazione dati

## 8. AVVIO DEL SERVER

Per avviare il server, seguire questi passaggi:

1. Aprire il terminale PowerShell

2. Navigare alla directory del backend:
   ```
   cd PythonProject5\progetto\backend
   ```

3. Avviare il server:
   ```
   py -m uvicorn main:app --host 0.0.0.0 --port 8081
   ```

4. Aprire il browser e visitare:
   ```
   http://localhost:8081
   ```

Note:
- Il server deve rimanere in esecuzione
- Per fermarlo: premere CTRL+C
- In caso di errori, verificare che la porta 8081 sia libera

## 9. DIPENDENZE PYTHON
```
fastapi
uvicorn
sqlalchemy
pydantic
python-jose[cryptography]
passlib[bcrypt]
python-multipart
```

## 10. TROUBLESHOOTING

Problemi comuni e soluzioni:

1. ERR_CONNECTION_REFUSED
   - Verificare che il server sia in esecuzione
   - Controllare la porta (8081)
   - Verificare firewall

2. Errori di autenticazione
   - Pulire localStorage del browser
   - Verificare credenziali
   - Controllare console browser per errori

3. Database non accessibile
   - Verificare permessi file trackgo.db
   - Controllare che SQLite sia installato
   - Verificare integrità database

## 11. SVILUPPI FUTURI
- Implementazione recupero password
- Sistema di notifiche
- Chat tra utenti
- Gestione pagamenti
- App mobile
- Sistema di tracking GPS
- Integrazione mappe

Per assistenza: [Alessio Koj] 